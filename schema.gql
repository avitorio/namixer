"""Direct the client to resolve this field locally, either from the cache or local resolvers."""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!
  """An array of query argument names to include in the generated custom store key."""
  filter: [String!]
) on FIELD

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type AlertKeywords {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  keyword: String
}

type AlertKeywordsConnection {
  values: [AlertKeywords]
  groupBy: AlertKeywordsGroupBy
  aggregate: AlertKeywordsAggregator
}

type AlertKeywordsAggregator {
  count: Int
  totalCount: Int
}

type AlertKeywordsGroupBy {
  id: [AlertKeywordsConnectionId]
  created_at: [AlertKeywordsConnectionCreated_at]
  updated_at: [AlertKeywordsConnectionUpdated_at]
  keyword: [AlertKeywordsConnectionKeyword]
}

type AlertKeywordsConnectionId {
  key: ID
  connection: AlertKeywordsConnection
}

type AlertKeywordsConnectionCreated_at {
  key: DateTime
  connection: AlertKeywordsConnection
}

type AlertKeywordsConnectionUpdated_at {
  key: DateTime
  connection: AlertKeywordsConnection
}

type AlertKeywordsConnectionKeyword {
  key: String
  connection: AlertKeywordsConnection
}

input AlertKeywordInput {
  keyword: String
  created_by: ID
  updated_by: ID
}

input editAlertKeywordInput {
  keyword: String
  created_by: ID
  updated_by: ID
}

input createAlertKeywordInput {
  data: AlertKeywordInput
}

type createAlertKeywordPayload {
  alertKeyword: AlertKeywords
}

input updateAlertKeywordInput {
  where: InputID
  data: editAlertKeywordInput
}

type updateAlertKeywordPayload {
  alertKeyword: AlertKeywords
}

input deleteAlertKeywordInput {
  where: InputID
}

type deleteAlertKeywordPayload {
  alertKeyword: AlertKeywords
}

type Alert {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  user: UsersPermissionsUser
  keywords(sort: String, limit: Int, start: Int, where: JSON): [AlertKeywords!]!
}

type AlertConnection {
  values: [Alert]
  groupBy: AlertGroupBy
  aggregate: AlertAggregator
}

type AlertAggregator {
  count: Int
  totalCount: Int
}

type AlertGroupBy {
  id: [AlertConnectionId]
  created_at: [AlertConnectionCreated_at]
  updated_at: [AlertConnectionUpdated_at]
  user: [AlertConnectionUser]
}

type AlertConnectionId {
  key: ID
  connection: AlertConnection
}

type AlertConnectionCreated_at {
  key: DateTime
  connection: AlertConnection
}

type AlertConnectionUpdated_at {
  key: DateTime
  connection: AlertConnection
}

type AlertConnectionUser {
  key: ID
  connection: AlertConnection
}

input AlertInput {
  user: ID
  keywords: [ID]
  created_by: ID
  updated_by: ID
}

input editAlertInput {
  user: ID
  keywords: [ID]
  created_by: ID
  updated_by: ID
}

input createAlertInput {
  data: AlertInput
}

type createAlertPayload {
  alert: Alert
}

input updateAlertInput {
  where: InputID
  data: editAlertInput
}

type updateAlertPayload {
  alert: Alert
}

input deleteAlertInput {
  where: InputID
}

type deleteAlertPayload {
  alert: Alert
}

enum ENUM_DOMAINS_STATUS {
  available
  taken
  unknown
}

type Domains {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  domain: String!
  tl_d: Tlds
  status: ENUM_DOMAINS_STATUS
  searches(sort: String, limit: Int, start: Int, where: JSON): [Search!]!
}

type DomainsConnection {
  values: [Domains]
  groupBy: DomainsGroupBy
  aggregate: DomainsAggregator
}

type DomainsAggregator {
  count: Int
  totalCount: Int
}

type DomainsGroupBy {
  id: [DomainsConnectionId]
  created_at: [DomainsConnectionCreated_at]
  updated_at: [DomainsConnectionUpdated_at]
  domain: [DomainsConnectionDomain]
  tl_d: [DomainsConnectionTl_d]
  status: [DomainsConnectionStatus]
}

type DomainsConnectionId {
  key: ID
  connection: DomainsConnection
}

type DomainsConnectionCreated_at {
  key: DateTime
  connection: DomainsConnection
}

type DomainsConnectionUpdated_at {
  key: DateTime
  connection: DomainsConnection
}

type DomainsConnectionDomain {
  key: String
  connection: DomainsConnection
}

type DomainsConnectionTl_d {
  key: ID
  connection: DomainsConnection
}

type DomainsConnectionStatus {
  key: String
  connection: DomainsConnection
}

input DomainInput {
  domain: String!
  tl_d: ID
  searches: [ID]
  status: ENUM_DOMAINS_STATUS
  created_by: ID
  updated_by: ID
}

input editDomainInput {
  domain: String
  tl_d: ID
  searches: [ID]
  status: ENUM_DOMAINS_STATUS
  created_by: ID
  updated_by: ID
}

input createDomainInput {
  data: DomainInput
}

type createDomainPayload {
  domain: Domains
}

input updateDomainInput {
  where: InputID
  data: editDomainInput
}

type updateDomainPayload {
  domain: Domains
}

input deleteDomainInput {
  where: InputID
}

type deleteDomainPayload {
  domain: Domains
}

enum ENUM_SEARCH_TYPE {
  alphabet
  topwords
  dictionary
}

enum ENUM_SEARCH_POSITION {
  suffix
  prefix
}

type Search {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  keyword: String!
  type: ENUM_SEARCH_TYPE!
  position: ENUM_SEARCH_POSITION
  characters: Long
  published_at: DateTime
  domains(sort: String, limit: Int, start: Int, where: JSON): [Domains!]!
}

type SearchConnection {
  values: [Search]
  groupBy: SearchGroupBy
  aggregate: SearchAggregator
}

type SearchAggregator {
  count: Int
  totalCount: Int
}

type SearchGroupBy {
  id: [SearchConnectionId]
  created_at: [SearchConnectionCreated_at]
  updated_at: [SearchConnectionUpdated_at]
  keyword: [SearchConnectionKeyword]
  type: [SearchConnectionType]
  position: [SearchConnectionPosition]
  characters: [SearchConnectionCharacters]
  published_at: [SearchConnectionPublished_at]
}

type SearchConnectionId {
  key: ID
  connection: SearchConnection
}

type SearchConnectionCreated_at {
  key: DateTime
  connection: SearchConnection
}

type SearchConnectionUpdated_at {
  key: DateTime
  connection: SearchConnection
}

type SearchConnectionKeyword {
  key: String
  connection: SearchConnection
}

type SearchConnectionType {
  key: String
  connection: SearchConnection
}

type SearchConnectionPosition {
  key: String
  connection: SearchConnection
}

type SearchConnectionCharacters {
  key: ID
  connection: SearchConnection
}

type SearchConnectionPublished_at {
  key: DateTime
  connection: SearchConnection
}

input SearchInput {
  keyword: String!
  type: ENUM_SEARCH_TYPE!
  position: ENUM_SEARCH_POSITION
  characters: Long
  domains: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editSearchInput {
  keyword: String
  type: ENUM_SEARCH_TYPE
  position: ENUM_SEARCH_POSITION
  characters: Long
  domains: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createSearchInput {
  data: SearchInput
}

type createSearchPayload {
  search: Search
}

input updateSearchInput {
  where: InputID
  data: editSearchInput
}

type updateSearchPayload {
  search: Search
}

input deleteSearchInput {
  where: InputID
}

type deleteSearchPayload {
  search: Search
}

type Tlds {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  TLD: String
  domains(sort: String, limit: Int, start: Int, where: JSON): [Domains!]!
}

type TldsConnection {
  values: [Tlds]
  groupBy: TldsGroupBy
  aggregate: TldsAggregator
}

type TldsAggregator {
  count: Int
  totalCount: Int
}

type TldsGroupBy {
  id: [TldsConnectionId]
  created_at: [TldsConnectionCreated_at]
  updated_at: [TldsConnectionUpdated_at]
  TLD: [TldsConnectionTLD]
}

type TldsConnectionId {
  key: ID
  connection: TldsConnection
}

type TldsConnectionCreated_at {
  key: DateTime
  connection: TldsConnection
}

type TldsConnectionUpdated_at {
  key: DateTime
  connection: TldsConnection
}

type TldsConnectionTLD {
  key: String
  connection: TldsConnection
}

input TldInput {
  TLD: String
  domains: [ID]
  created_by: ID
  updated_by: ID
}

input editTldInput {
  TLD: String
  domains: [ID]
  created_by: ID
  updated_by: ID
}

input createTldInput {
  data: TldInput
}

type createTldPayload {
  tld: Tlds
}

input updateTldInput {
  where: InputID
  data: editTldInput
}

type updateTldPayload {
  tld: Tlds
}

input deleteTldInput {
  where: InputID
}

type deleteTldPayload {
  tld: Tlds
}

type EmailDesignerEmailTemplate {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
}

input EmailTemplateInput {
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
  created_by: ID
  updated_by: ID
}

input editEmailTemplateInput {
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph!]!
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission!]!
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser!]!
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | AlertKeywords | AlertKeywordsConnection | AlertKeywordsAggregator | AlertKeywordsGroupBy | AlertKeywordsConnectionId | AlertKeywordsConnectionCreated_at | AlertKeywordsConnectionUpdated_at | AlertKeywordsConnectionKeyword | createAlertKeywordPayload | updateAlertKeywordPayload | deleteAlertKeywordPayload | Alert | AlertConnection | AlertAggregator | AlertGroupBy | AlertConnectionId | AlertConnectionCreated_at | AlertConnectionUpdated_at | AlertConnectionUser | createAlertPayload | updateAlertPayload | deleteAlertPayload | Domains | DomainsConnection | DomainsAggregator | DomainsGroupBy | DomainsConnectionId | DomainsConnectionCreated_at | DomainsConnectionUpdated_at | DomainsConnectionDomain | DomainsConnectionTl_d | DomainsConnectionStatus | createDomainPayload | updateDomainPayload | deleteDomainPayload | Search | SearchConnection | SearchAggregator | SearchGroupBy | SearchConnectionId | SearchConnectionCreated_at | SearchConnectionUpdated_at | SearchConnectionKeyword | SearchConnectionType | SearchConnectionPosition | SearchConnectionCharacters | SearchConnectionPublished_at | createSearchPayload | updateSearchPayload | deleteSearchPayload | Tlds | TldsConnection | TldsAggregator | TldsGroupBy | TldsConnectionId | TldsConnectionCreated_at | TldsConnectionUpdated_at | TldsConnectionTLD | createTldPayload | updateTldPayload | deleteTldPayload | EmailDesignerEmailTemplate | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  alertKeyword(id: ID!, publicationState: PublicationState): AlertKeywords
  alertKeywords(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [AlertKeywords!]!
  alertKeywordsConnection(sort: String, limit: Int, start: Int, where: JSON): AlertKeywordsConnection
  alert(id: ID!, publicationState: PublicationState): Alert
  alerts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Alert!]!
  alertsConnection(sort: String, limit: Int, start: Int, where: JSON): AlertConnection
  domain(id: ID!, publicationState: PublicationState): Domains
  domains(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Domains!]!
  domainsConnection(sort: String, limit: Int, start: Int, where: JSON): DomainsConnection
  search(id: ID!, publicationState: PublicationState): Search
  searches(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Search!]!
  searchesConnection(sort: String, limit: Int, start: Int, where: JSON): SearchConnection
  tld(id: ID!, publicationState: PublicationState): Tlds
  tlds(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Tlds!]!
  tldsConnection(sort: String, limit: Int, start: Int, where: JSON): TldsConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile!]!
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  """Retrieve all the existing roles. You can't apply filters on this query."""
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole!]!
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser!]!
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createAlertKeyword(input: createAlertKeywordInput): createAlertKeywordPayload
  updateAlertKeyword(input: updateAlertKeywordInput): updateAlertKeywordPayload
  deleteAlertKeyword(input: deleteAlertKeywordInput): deleteAlertKeywordPayload
  createAlert(input: createAlertInput): createAlertPayload
  updateAlert(input: updateAlertInput): updateAlertPayload
  deleteAlert(input: deleteAlertInput): deleteAlertPayload
  createDomain(input: createDomainInput): createDomainPayload
  updateDomain(input: updateDomainInput): updateDomainPayload
  deleteDomain(input: deleteDomainInput): deleteDomainPayload
  createSearch(input: createSearchInput): createSearchPayload
  updateSearch(input: updateSearchInput): updateSearchPayload
  deleteSearch(input: deleteSearchInput): deleteSearchPayload
  createTld(input: createTldInput): createTldPayload
  updateTld(input: updateTldInput): updateTldPayload
  deleteTld(input: deleteTldInput): deleteTldPayload
  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload
  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload
  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload
  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  """Create a new user"""
  createUser(input: createUserInput): createUserPayload
  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload
  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

"""A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
